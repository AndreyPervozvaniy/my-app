{"version":3,"file":"static/js/923.1d51d7e1.chunk.js","mappings":"sRAkBMA,EAAU,SAAHC,GAAgC,IAA1BC,EAAID,EAAJC,KAAMC,EAAIF,EAAJE,KAAMC,EAAMH,EAANG,OAC7B,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,UAAW,MAAOC,MAAO,SAASC,SAAA,EACvCC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,EAAG,GACHC,EAAG,GACHL,MAAO,SACPM,QAAS,SACTC,QAAS,OACTC,GAAIZ,EAAOK,SAEVN,KAEHO,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAACC,WAAY,IAAIT,SAAEP,MAG9B,EAiFA,UAhFoB,WAClB,OACEG,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAV,SAAA,EACEC,EAAAA,EAAAA,KAACU,EAAAA,EAAM,IAAG,KAACV,EAAAA,EAAAA,KAACW,EAAAA,EAAQ,KACpBX,EAAAA,EAAAA,KAACY,EAAAA,EAAa,CAACC,QAAQ,KAAKC,QAAQ,SAAQf,UAC1CC,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAACC,KAAM,MAAOC,GAAI,GAAGlB,SAC5BmB,EAAAA,GAAgBC,KAAI,SAACC,EAAYC,GAAK,OACrC1B,EAAAA,EAAAA,MAAC2B,EAAAA,EAAU,CAETC,QAAS,CAAEC,KAAM,EAAGC,GAAI,GACxBC,QAAS,GACTb,QAAS,OAAOd,SAAA,EAEhBJ,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAC8B,QAAS,EAAE3B,SAAA,EAChBC,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CACHoB,cAAe,YACfC,MAAO,WACPpB,WAAY,IACZqB,SAAU,KACVvB,GAAI,UACJwB,EAAG,EACHC,UAAW,aACX1B,QAAS,KAAKN,SAEbqB,EAAWY,SAEdhC,EAAAA,EAAAA,KAACiC,EAAAA,EAAO,CAACzB,WAAW,OAAMT,SAAEqB,EAAWc,QACvClC,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAACqB,MAAO,WAAYC,SAAU,KAAK9B,SACrCqB,EAAWe,eAEdxC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJ8B,QAAS,EACTU,SAASpC,EAAAA,EAAAA,KAACqC,EAAAA,EAAY,CAACC,YAAa,aAAevC,SAAA,EAEnDC,EAAAA,EAAAA,KAACV,EAAO,CACNG,KAAM2B,EAAW3B,KACjBC,OAAQ0B,EAAWmB,KACnB/C,KAAM4B,EAAWoB,aAEnBxC,EAAAA,EAAAA,KAACV,EAAO,CACNG,MACEO,EAAAA,EAAAA,KAACyC,EAAAA,EAAI,CAACC,GAAIC,EAAAA,IAAWf,MAAO,YAAa1B,EAAG,EAAGC,EAAG,IAEpDT,OAAQ,YACRF,KAAM4B,EAAWwB,QAEnB5C,EAAAA,EAAAA,KAACV,EAAO,CACNG,MACEO,EAAAA,EAAAA,KAACyC,EAAAA,EAAI,CACHC,GAAIG,EAAAA,IACJjB,MAAO,aACP1B,EAAG,EACHC,EAAG,IAGPT,OAAQ,aACRF,KAAM4B,EAAW0B,oBAIvB9C,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAF,UACHC,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CACNC,QAAQ,QACN3C,QAAS,KACT4C,IAAK,gBACLC,IAAK9B,EAAW+B,SAChBC,UAAW,QACXlD,EAAE,QACFC,EAAE,cA5DDkB,EA+DM,SAInBrB,EAAAA,EAAAA,KAACqD,EAAAA,EAAa,MAGpB,C,+OCpCaC,GAAOC,EAAAA,EAAAA,IAA6B,SAAcC,EAAOC,GACpE,IACEC,EAYEF,EAZFE,cACAC,EAWEH,EAXFG,IACAC,EAUEJ,EAVFI,OACAC,EASEL,EATFK,UACAC,EAQEN,EARFM,OACAC,EAOEP,EAPFO,IACAC,EAMER,EANFQ,SACAC,EAKET,EALFS,SACAC,EAIEV,EAJFU,aACAC,EAGEX,EAHFW,YACAC,EAEEZ,EAFFY,gBACGC,GAAAC,EAAAA,EAAAA,GACDd,EAAAe,GAEEC,EAAS,CACbC,QAAS,OACTC,kBAAmBhB,EACnBiB,QAAShB,EACTiB,WAAYhB,EACZiB,cAAehB,EACfiB,gBAAiBX,EACjBY,WAAYjB,EACZkB,QAASjB,EACTkB,aAAcjB,EACdkB,aAAcjB,EACdkB,iBAAkBjB,EAClBkB,oBAAqBhB,GAGvB,OAAOiB,EAAAA,EAAAA,KAACC,EAAAA,EAAOC,KAAAC,EAAAA,EAAAA,GAAA,CAAI/B,IAAAA,EAAUgC,MAAOjB,GAAYH,GAClD,IAEAf,EAAKoC,YAAc,O,gGCnENpE,GAAaiC,EAAAA,EAAAA,IACxB,SAAoBC,EAAOC,GACzB,IAkCoBkC,EAlCZpE,EACNiC,EADMjC,QAASqE,EACfpC,EADeoC,SAAUC,EACzBrC,EADyBqC,SAAUnE,EACnC8B,EADmC9B,QAASoE,EAC5CtC,EAD4CsC,cAAkBzB,GAAAC,EAAAA,EAAAA,GAC9Dd,EAAAe,GAEIwB,GAAQC,EAAAA,EAAAA,KACR5B,EAAkB0B,EAuB5B,SAAwBG,EAAYF,GAClC,OAAOG,EAAAA,EAAAA,IAAcD,GAAO,SAACE,GAC3B,IANUC,EAMJC,GAASC,EAAAA,EAAAA,IAAS,QAASH,EALf,kBADRC,EAMmCD,GALhB,GAAXI,OAAcH,EAAA,MAAQA,EAKzBE,CAAsCP,GACrD,OAAiB,OAAVI,EAAiB,KAAO,2BAAPI,OAAkCF,EAAA,UAC5D,GACF,CA3BQG,CAAeV,EAAeC,IA6BdJ,EA5BDpE,GA6Bd2E,EAAAA,EAAAA,IAAcP,GAAO,SAACQ,GAAA,OACjB,OAAVA,EAAiB,KAAO,UAAPI,OAAiBJ,EAAA,yBA5BlC,OACEd,EAAAA,EAAAA,KAAC/B,GAAAkC,EAAAA,EAAAA,GAAA,CACC/B,IAAAA,EACAE,IAAKjC,EACLmC,UAAW+B,EACXhC,OAAQiC,EACRzB,gBAAAA,GACIC,GAGV,IAGF/C,EAAWoE,YAAc,Y,0JC9CZzD,GAAUsB,EAAAA,EAAAA,IAA+B,SACpDC,EACAC,GAEA,IAAMe,GAASiC,EAAAA,EAAAA,IAAe,UAAWjD,GACzCkD,GAA+BC,EAAAA,EAAAA,IAAiBnD,GAA1Ba,GAAdqC,EAAAE,WAActC,EAAAA,EAAAA,GAAAoC,EAAAnC,IAEtB,OACEc,EAAAA,EAAAA,KAACC,EAAAA,EAAOuB,IAAArB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACN/B,IAAAA,EACAmD,WAAWE,EAAAA,EAAAA,IAAG,iBAAkBtD,EAAMoD,YAClCvC,GAAA,IACJoB,MAAOjB,IAGb,IAEAvC,EAAQyD,YAAc,S,wFClCTrD,EAAuC,SAACmB,GAAA,OACnD6B,EAAAA,EAAAA,KAACC,EAAAA,EAAOC,KAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACNoB,UAAU,yBACNpD,GAAA,IACJiC,OAAAD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKhC,EAAa,WAChBuD,YAAa,EACbhF,UAAW,UACXO,YAAa,UACb2D,MAAO,OACPe,OAAQ,WAEZ,EAGF3E,EAAaqD,YAAc,c","sources":["components/pages/Instructors.jsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/layout/src/stack/stack-divider.tsx"],"sourcesContent":["import React from \"react\";\r\nimport Navbar from \"../navigation/Nav\";\r\nimport { Flex } from \"@chakra-ui/react\";\r\nimport {\r\n  Container,\r\n  SimpleGrid,\r\n  Image,\r\n  Heading,\r\n  Text,\r\n  Stack,\r\n  StackDivider,\r\n  Icon,\r\n} from \"@chakra-ui/react\";\r\nimport { GiTeacher, GiSandsOfTime } from \"react-icons/gi\";\r\nimport Elevator from \"../elem/Elevator\";\r\nimport { InstructorsInfo } from \"../../utils\";\r\nimport SmallCentered from \"../elem/Footer\";\r\nimport FlexContainer from \"../elem/FlexContainer\";\r\nconst Feature = ({ text, icon, iconBg }) => {\r\n  return (\r\n    <Stack direction={\"row\"} align={\"center\"}>\r\n      <Flex\r\n        w={12}\r\n        h={12}\r\n        align={\"center\"}\r\n        justify={\"center\"}\r\n        rounded={\"full\"}\r\n        bg={iconBg}\r\n      >\r\n        {icon}\r\n      </Flex>\r\n      <Text fontWeight={600}>{text}</Text>\r\n    </Stack>\r\n  );\r\n};\r\nconst Instructors = () => {\r\n  return (\r\n    <>\r\n      <Navbar /> <Elevator />\r\n      <FlexContainer padding=\"5%\" flexDir=\"column\">\r\n        <Container maxW={\"5xl\"} py={12}>\r\n          {InstructorsInfo.map((instructor, index) => (\r\n            <SimpleGrid\r\n              key={index}\r\n              columns={{ base: 1, md: 2 }}\r\n              spacing={10}\r\n              padding={\"20px\"}\r\n            >\r\n              <Stack spacing={4}>\r\n                <Text\r\n                  textTransform={\"uppercase\"}\r\n                  color={\"blue.400\"}\r\n                  fontWeight={600}\r\n                  fontSize={\"md\"}\r\n                  bg={\"blue.50\"}\r\n                  p={2}\r\n                  alignSelf={\"flex-start\"}\r\n                  rounded={\"md\"}\r\n                >\r\n                  {instructor.title}\r\n                </Text>\r\n                <Heading fontWeight=\"bold\">{instructor.name}</Heading>\r\n                <Text color={\"gray.500\"} fontSize={\"lg\"}>\r\n                  {instructor.description}\r\n                </Text>\r\n                <Stack\r\n                  spacing={4}\r\n                  divider={<StackDivider borderColor={\"gray.100\"} />}\r\n                >\r\n                  <Feature\r\n                    icon={instructor.icon}\r\n                    iconBg={instructor.belt}\r\n                    text={instructor.beltColor}\r\n                  />\r\n                  <Feature\r\n                    icon={\r\n                      <Icon as={GiTeacher} color={\"green.500\"} w={8} h={8} />\r\n                    }\r\n                    iconBg={\"green.100\"}\r\n                    text={instructor.role}\r\n                  />\r\n                  <Feature\r\n                    icon={\r\n                      <Icon\r\n                        as={GiSandsOfTime}\r\n                        color={\"purple.500\"}\r\n                        w={8}\r\n                        h={8}\r\n                      />\r\n                    }\r\n                    iconBg={\"purple.100\"}\r\n                    text={instructor.experience}\r\n                  />\r\n                </Stack>\r\n              </Stack>\r\n              <Flex>\r\n                <Image\r\n                loading='eager'\r\n                  rounded={\"xl\"}\r\n                  alt={\"feature image\"}\r\n                  src={instructor.imageSrc}\r\n                  objectFit={\"cover\"}\r\n                  w=\"350px\"\r\n                  h=\"450px\"\r\n                />\r\n              </Flex>\r\n            </SimpleGrid>\r\n          ))}\r\n        </Container>\r\n      </FlexContainer>\r\n      <SmallCentered />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Instructors;\r\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import { HTMLChakraProps, ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nStackDivider.displayName = \"StackDivider\"\n"],"names":["Feature","_ref","text","icon","iconBg","_jsxs","Stack","direction","align","children","_jsx","Flex","w","h","justify","rounded","bg","Text","fontWeight","_Fragment","Navbar","Elevator","FlexContainer","padding","flexDir","Container","maxW","py","InstructorsInfo","map","instructor","index","SimpleGrid","columns","base","md","spacing","textTransform","color","fontSize","p","alignSelf","title","Heading","name","description","divider","StackDivider","borderColor","belt","beltColor","Icon","as","GiTeacher","role","GiSandsOfTime","experience","Image","loading","alt","src","imageSrc","objectFit","SmallCentered","Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","_objectWithoutProperties","_excluded","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","jsx","chakra","div","_objectSpread","__css","displayName","count","spacingX","spacingY","minChildWidth","theme","useTheme","width","mapResponsive","value","n","_value","getToken","concat","widthToColumns","useStyleConfig","_omitThemingProps","omitThemingProps","className","h2","cx","borderWidth","height"],"sourceRoot":""}