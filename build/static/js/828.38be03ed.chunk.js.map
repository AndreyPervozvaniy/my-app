{"version":3,"file":"static/js/828.38be03ed.chunk.js","mappings":"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","sources":["components/navigation/Nav.jsx","components/pages/OurBelts.jsx"],"sourcesContent":["import {\r\n  Box,\r\n  Flex,\r\n  HStack,\r\n  Text,\r\n  Link,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  Image,\r\n  MenuItem,\r\n  Stack,\r\n  Icon,\r\n  IconButton,\r\n  useDisclosure,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { GiHamburgerMenu } from \"react-icons/gi\";\r\nimport Logo from \"../../assets/img/Logo.png\";\r\nimport { BiChevronDown } from \"react-icons/bi\";\r\nimport React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  DrawerHeader,\r\n  DrawerBody,\r\n} from \"@chakra-ui/react\";\r\n\r\nexport default function Navbar() {\r\n  const navLinks = [\r\n    { name: \"Програма тренувань\", path: \"/programms\" },\r\n    { name: \"Інструктори\", path: \"/instructors\" },\r\n    { name: \"Розклад\", path: \"/schedule\" },\r\n    { name: \"Новини\", path: \"/news\" },\r\n    { name: \"Контакти\", path: \"/contacts\" },\r\n  ];\r\n\r\n  const dropdownLinks = [\r\n    { name: \"Наша академія\", path: \"/ourAcademy\" },\r\n    // { name: \"Наша команда\", path: \"/ourBelts\" },\r\n  ];\r\n  const { onClose } = useDisclosure();\r\n  const [showShadow, setShowShadow] = useState(false);\r\n\r\n  const [issOpen, setIsOpen] = useState(false);\r\n\r\n  const onnClose = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const onnOpen = () => {\r\n    setIsOpen(true);\r\n  };\r\n  const router = useNavigate();\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      const scrollThreshold = 50;\r\n      if (window.scrollY > scrollThreshold) {\r\n        setShowShadow(true);\r\n      } else {\r\n        setShowShadow(false);\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      justifyContent=\"space-between\"\r\n      pos=\"fixed\"\r\n      w=\"100%\"\r\n      top=\"0\"\r\n      left=\"0\"\r\n      background=\"white\"\r\n      alignItems=\"center\"\r\n      padding=\"0 5%\"\r\n      fontWeight={\"bold\"}\r\n      zIndex=\"11\"\r\n      boxShadow={showShadow ? \"0 2px 4px rgba(0, 0, 0, 0.2)\" : \"none\"}\r\n    >\r\n      <Flex h={16} alignItems=\"center\"  justifyContent=\"space-between\" mx=\"auto\"   px={{base:6, md:2, lg:0}} >\r\n        <Image\r\n          w={{base:'150px',md:'170px',lg:\"200px\"}}\r\n          src={Logo}\r\n          onClick={(e) => {\r\n            e.preventDefault();  \r\n            router(\"/\");\r\n          }}\r\n          transition=\"all 0.7s\"\r\n          cursor=\"pointer\"\r\n          // _hover={{ transform: \"scale(1.2)\" }}\r\n        />\r\n\r\n        <HStack\r\n          spacing={3}\r\n          alignItems=\"center\"\r\n          fontSize={\"lg\"}\r\n          display={{ base: \"none\", lg: \"flex\" }}\r\n        >\r\n          {\" \"}\r\n          <Menu autoSelect={false} isLazy>\r\n            {({ isOpen, onClose }) => (\r\n              <>\r\n                <MenuButton\r\n                  _hover={{ color: \"black.400\", textDecoration: \"underline\" }}\r\n                >\r\n                  <Flex alignItems=\"center\">\r\n                    <Text fontWeight={\"bold\"}>Про нас </Text>\r\n                    <Icon\r\n                      as={BiChevronDown}\r\n                      h={5}\r\n                      w={5}\r\n                      ml={1}\r\n                      transition=\"all .25s ease-in-out\"\r\n                      transform={isOpen ? \"rotate(180deg)\" : \"\"}\r\n                    />\r\n                  </Flex>\r\n                </MenuButton>\r\n                <MenuList zIndex={5}>\r\n                  {dropdownLinks.map((link, index) => (\r\n                    <MenuLink\r\n                      key={index}\r\n                      name={link.name}\r\n                      path={link.path}\r\n                      onClose={onClose}\r\n                    />\r\n                  ))}\r\n                </MenuList>{\" \"}\r\n              </>\r\n            )}\r\n          </Menu>\r\n          <HStack\r\n            as=\"nav\"\r\n            spacing={6}\r\n            display={{ base: \"none\", md: \"flex\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            {navLinks.map((link, index) => (\r\n              <Box\r\n                key={link.name}\r\n                cursor={\"pointer\"}\r\n                onClick={() => router(link.path)}\r\n                onClose={onClose}\r\n                _hover={{\r\n                  textDecoration: \"underline\",\r\n                }}\r\n              >\r\n                {link.name}\r\n              </Box>\r\n              // <NavLink key={index} {...link} onClose={onClose} />\r\n            ))}\r\n\r\n            {/* Dropdown Menu */}\r\n          </HStack>\r\n        </HStack>\r\n\r\n        <IconButton\r\n          size=\"sm\"\r\n          icon={<GiHamburgerMenu />}\r\n          aria-label=\"Open Menu\"\r\n          display={{ base: \"inherit\", lg: \"none\" }}\r\n          onClick={issOpen ? onnClose : onnOpen}\r\n        />\r\n      </Flex>\r\n\r\n      <Drawer placement=\"right\" onClose={onClose} isOpen={issOpen}>\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Меню</DrawerHeader>\r\n            <DrawerBody\r\n              bgColor={\"white\"}\r\n              h={\"100%\"}\r\n              textAlign={\"center\"}\r\n              padding={\"7%\"}\r\n              fontSize={\"lg\"}\r\n              overflowY=\"auto\"\r\n              fontWeight={\"bold\"}\r\n            >\r\n              <Stack as=\"nav\" spacing={2}>\r\n                {navLinks.map((link, index) => (\r\n                  <Box\r\n                    p={2}\r\n                    key={link.name}\r\n                    onClick={() => router(link.path)}\r\n                    onClose={onClose}\r\n                  >\r\n                    {link.name}\r\n                  </Box>\r\n                  // <NavLink key={index} {...link} onClose={onClose} />\r\n                ))}\r\n                {/* <Text fontWeight=\"bold\" color={\"grey\"}>\r\n                  Про нас :{\" \"}\r\n                </Text> */}\r\n\r\n                <Stack pl={2} spacing={1} mt={\"0 !important\"}>\r\n                  {dropdownLinks.map((link, index) => (\r\n                    <Box\r\n                      key={link.name}\r\n                      onClick={() => router(link.path)}\r\n                      onClose={onClose}\r\n                      p={2}\r\n                    >\r\n                      {link.name}\r\n                    </Box>\r\n                    // <NavLink key={index} {...link}  />\r\n                  ))}\r\n                </Stack>\r\n              </Stack>\r\n            </DrawerBody>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </Box>\r\n  );\r\n}\r\n\r\n// NavLink Component\r\n\r\n// const NavLink = ({ name, path, onClose }) => {\r\n//   return (\r\n//     <Link\r\n//       href={path}\r\n//       lineHeight=\"inherit\"\r\n//       _hover={{\r\n//         textDecoration: \"underline\",\r\n//         color: useColorModeValue(\"black.500\", \"black.200\"),\r\n//       }}\r\n//       onClick={() => onClose()}\r\n//     >\r\n//       {name}\r\n//     </Link>\r\n//   );\r\n// };\r\n// Dropdown MenuLink Component\r\nconst MenuLink = ({ name, path, onClose }) => {\r\n  return (\r\n    <Link href={path} onClick={() => onClose()}>\r\n      <MenuItem\r\n        _hover={{\r\n          textDecoration: \"underline\",\r\n          color: useColorModeValue(\"black.500\", \"black.200\"),\r\n        }}\r\n      >\r\n        <Text>{name}</Text>\r\n      </MenuItem>\r\n    </Link>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Navbar from \"../navigation/Nav\";\r\nconst OurBelts = () => {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OurBelts;\r\n"],"names":["Navbar","navLinks","name","path","dropdownLinks","onClose","useDisclosure","_useState","useState","_useState2","_slicedToArray","showShadow","setShowShadow","_useState3","_useState4","issOpen","setIsOpen","router","useNavigate","useEffect","handleScroll","window","scrollY","addEventListener","removeEventListener","_jsxs","Box","justifyContent","pos","w","top","left","background","alignItems","padding","fontWeight","zIndex","boxShadow","children","Flex","h","mx","px","base","md","lg","_jsx","Image","src","Logo","onClick","e","preventDefault","transition","cursor","HStack","spacing","fontSize","display","Menu","autoSelect","isLazy","_ref","isOpen","_Fragment","MenuButton","_hover","color","textDecoration","Text","Icon","as","BiChevronDown","ml","transform","MenuList","map","link","index","MenuLink","IconButton","size","icon","GiHamburgerMenu","Drawer","placement","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","DrawerBody","bgColor","textAlign","overflowY","Stack","p","pl","mt","_ref2","Link","href","MenuItem","useColorModeValue"],"sourceRoot":""}