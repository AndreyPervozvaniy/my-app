{"version":3,"file":"static/js/828.ecbbe127.chunk.js","mappings":"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","sources":["components/navigation/Nav.jsx","components/pages/OurBelts.jsx"],"sourcesContent":["import {\n  Box,\n  Flex,\n  HStack,\n  Text,\n  Link,\n  Menu,\n  MenuButton,\n  MenuList,\n  Image,\n  MenuItem,\n  Stack,\n  Icon,\n  IconButton,\n  useDisclosure,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\nimport { GiHamburgerMenu } from \"react-icons/gi\";\nimport Logo from \"../../assets/img/LOGO.png\";\nimport { BiChevronDown } from \"react-icons/bi\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerHeader,\n  DrawerBody,\n} from \"@chakra-ui/react\";\n\nexport default function Navbar() {\n  const navLinks = [\n    { name: \"Програма тренувань\", path: \"/programms\" },\n    { name: \"Інструктори\", path: \"/instructors\" },\n    { name: \"Розклад\", path: \"/schedule\" },\n    { name: \"Новини\", path: \"/news\" },\n    { name: \"Контакти\", path: \"/contacts\" },\n  ];\n\n  const dropdownLinks = [\n    { name: \"Наша академія\", path: \"/ourAcademy\" },\n    // { name: \"Наша команда\", path: \"/ourBelts\" },\n  ];\n  const { onClose } = useDisclosure();\n  const [showShadow, setShowShadow] = useState(false);\n\n  const [issOpen, setIsOpen] = useState(false);\n\n  const onnClose = () => {\n    setIsOpen(false);\n  };\n\n  const onnOpen = () => {\n    setIsOpen(true);\n  };\n  const router = useNavigate();\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollThreshold = 50;\n      if (window.scrollY > scrollThreshold) {\n        setShowShadow(true);\n      } else {\n        setShowShadow(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n\n  return (\n    <Box\n      justifyContent=\"space-between\"\n      pos=\"fixed\"\n      w=\"100%\"\n      top=\"0\"\n      left=\"0\"\n      background=\"white\"\n      alignItems=\"center\"\n      padding=\"0 5%\"\n      fontWeight={\"bold\"}\n      zIndex=\"11\"\n      boxShadow={showShadow ? \"0 2px 4px rgba(0, 0, 0, 0.2)\" : \"none\"}\n    >\n      <Flex h={16} alignItems=\"center\"  justifyContent=\"space-between\" mx=\"auto\"   px={{base:6, md:2, lg:0}} >\n        <Image\n          w={{base:'150px',md:'170px',lg:\"200px\"}}\n          src={Logo}\n          onClick={(e) => {\n            e.preventDefault();  \n            router(\"/\");\n          }}\n          transition=\"all 0.7s\"\n          cursor=\"pointer\"\n          // _hover={{ transform: \"scale(1.2)\" }}\n        />\n\n        <HStack\n          spacing={3}\n          alignItems=\"center\"\n          fontSize={\"lg\"}\n          display={{ base: \"none\", lg: \"flex\" }}\n        >\n          {\" \"}\n          <Menu autoSelect={false} isLazy>\n            {({ isOpen, onClose }) => (\n              <>\n                <MenuButton\n                  _hover={{ color: \"black.400\", textDecoration: \"underline\" }}\n                >\n                  <Flex alignItems=\"center\">\n                    <Text fontWeight={\"bold\"}>Про нас </Text>\n                    <Icon\n                      as={BiChevronDown}\n                      h={5}\n                      w={5}\n                      ml={1}\n                      transition=\"all .25s ease-in-out\"\n                      transform={isOpen ? \"rotate(180deg)\" : \"\"}\n                    />\n                  </Flex>\n                </MenuButton>\n                <MenuList zIndex={5}>\n                  {dropdownLinks.map((link, index) => (\n                    <MenuLink\n                      key={index}\n                      name={link.name}\n                      path={link.path}\n                      onClose={onClose}\n                    />\n                  ))}\n                </MenuList>{\" \"}\n              </>\n            )}\n          </Menu>\n          <HStack\n            as=\"nav\"\n            spacing={6}\n            display={{ base: \"none\", md: \"flex\" }}\n            alignItems=\"center\"\n          >\n            {navLinks.map((link, index) => (\n              <Box\n                key={link.name}\n                cursor={\"pointer\"}\n                onClick={() => router(link.path)}\n                onClose={onClose}\n                _hover={{\n                  textDecoration: \"underline\",\n                }}\n              >\n                {link.name}\n              </Box>\n              // <NavLink key={index} {...link} onClose={onClose} />\n            ))}\n\n            {/* Dropdown Menu */}\n          </HStack>\n        </HStack>\n\n        <IconButton\n          size=\"sm\"\n          icon={<GiHamburgerMenu />}\n          aria-label=\"Open Menu\"\n          display={{ base: \"inherit\", lg: \"none\" }}\n          onClick={issOpen ? onnClose : onnOpen}\n        />\n      </Flex>\n\n      <Drawer placement=\"right\" onClose={onClose} isOpen={issOpen}>\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerCloseButton />\n            <DrawerHeader>Меню</DrawerHeader>\n            <DrawerBody\n              bgColor={\"white\"}\n              h={\"100%\"}\n              textAlign={\"center\"}\n              padding={\"7%\"}\n              fontSize={\"lg\"}\n              overflowY=\"auto\"\n              fontWeight={\"bold\"}\n            >\n              <Stack as=\"nav\" spacing={2}>\n                {navLinks.map((link, index) => (\n                  <Box\n                    p={2}\n                    key={link.name}\n                    onClick={() => router(link.path)}\n                    onClose={onClose}\n                  >\n                    {link.name}\n                  </Box>\n                  // <NavLink key={index} {...link} onClose={onClose} />\n                ))}\n                {/* <Text fontWeight=\"bold\" color={\"grey\"}>\n                  Про нас :{\" \"}\n                </Text> */}\n\n                <Stack pl={2} spacing={1} mt={\"0 !important\"}>\n                  {dropdownLinks.map((link, index) => (\n                    <Box\n                      key={link.name}\n                      onClick={() => router(link.path)}\n                      onClose={onClose}\n                      p={2}\n                    >\n                      {link.name}\n                    </Box>\n                    // <NavLink key={index} {...link}  />\n                  ))}\n                </Stack>\n              </Stack>\n            </DrawerBody>\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </Box>\n  );\n}\n\n// NavLink Component\n\n// const NavLink = ({ name, path, onClose }) => {\n//   return (\n//     <Link\n//       href={path}\n//       lineHeight=\"inherit\"\n//       _hover={{\n//         textDecoration: \"underline\",\n//         color: useColorModeValue(\"black.500\", \"black.200\"),\n//       }}\n//       onClick={() => onClose()}\n//     >\n//       {name}\n//     </Link>\n//   );\n// };\n// Dropdown MenuLink Component\nconst MenuLink = ({ name, path, onClose }) => {\n  return (\n    <Link href={path} onClick={() => onClose()}>\n      <MenuItem\n        _hover={{\n          textDecoration: \"underline\",\n          color: useColorModeValue(\"black.500\", \"black.200\"),\n        }}\n      >\n        <Text>{name}</Text>\n      </MenuItem>\n    </Link>\n  );\n};\n","import React from \"react\";\nimport Navbar from \"../navigation/Nav\";\nconst OurBelts = () => {\n  return (\n    <>\n      <Navbar />\n    </>\n  );\n};\n\nexport default OurBelts;\n"],"names":["Navbar","navLinks","name","path","dropdownLinks","onClose","useDisclosure","_useState","useState","_useState2","_slicedToArray","showShadow","setShowShadow","_useState3","_useState4","issOpen","setIsOpen","router","useNavigate","useEffect","handleScroll","window","scrollY","addEventListener","removeEventListener","_jsxs","Box","justifyContent","pos","w","top","left","background","alignItems","padding","fontWeight","zIndex","boxShadow","children","Flex","h","mx","px","base","md","lg","_jsx","Image","src","Logo","onClick","e","preventDefault","transition","cursor","HStack","spacing","fontSize","display","Menu","autoSelect","isLazy","_ref","isOpen","_Fragment","MenuButton","_hover","color","textDecoration","Text","Icon","as","BiChevronDown","ml","transform","MenuList","map","link","index","MenuLink","IconButton","size","icon","GiHamburgerMenu","Drawer","placement","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","DrawerBody","bgColor","textAlign","overflowY","Stack","p","pl","mt","_ref2","Link","href","MenuItem","useColorModeValue"],"sourceRoot":""}