{"version":3,"file":"static/js/923.c524ddd6.chunk.js","mappings":"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","sources":["components/elem/FlexContainer.jsx","components/pages/Instructors.jsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/layout/src/stack/stack-divider.tsx"],"sourcesContent":["import React from \"react\";\nimport { Flex } from \"@chakra-ui/react\";\n\nfunction FlexContainer  ({ children, ...props }) {\n  return (\n    <Flex {...props} justifyContent={\"center\"} alignItems={\"center\"} >\n      {children}\n    </Flex>\n  );\n};\n \nexport default FlexContainer;\n","import React from \"react\";\nimport Navbar from \"../navigation/Nav\";\nimport { Flex } from \"@chakra-ui/react\";\nimport {\n  Container,\n  SimpleGrid,\n  Image,\n  Heading,\n  Text,\n  Stack,\n  StackDivider,\n  Icon,\n} from \"@chakra-ui/react\";\nimport { GiTeacher, GiSandsOfTime } from \"react-icons/gi\";\nimport Elevator from \"../elem/Elevator\";\nimport { InstructorsInfo } from \"../../utils\";\nimport SmallCentered from \"../elem/Footer\";\nimport FlexContainer from \"../elem/FlexContainer\";\nconst Feature = ({ text, icon, iconBg }) => {\n  return (\n    <Stack direction={\"row\"} align={\"center\"}>\n      <Flex\n        w={12}\n        h={12}\n        align={\"center\"}\n        justify={\"center\"}\n        rounded={\"full\"}\n        bg={iconBg}\n      >\n        {icon}\n      </Flex>\n      <Text fontWeight={600}>{text}</Text>\n    </Stack>\n  );\n};\nconst Instructors = () => {\n  return (\n    <>\n      <Navbar /> <Elevator />\n      <FlexContainer padding=\"5%\" flexDir=\"column\">\n        <Container maxW={\"5xl\"} py={12}>\n          {InstructorsInfo.map((instructor, index) => (\n            <SimpleGrid\n              key={index}\n              columns={{ base: 1, md: 2 }}\n              spacing={10}\n              padding={\"20px\"}\n            >\n              <Stack spacing={4}>\n                <Text\n                  textTransform={\"uppercase\"}\n                  color={\"blue.400\"}\n                  fontWeight={600}\n                  fontSize={\"md\"}\n                  bg={\"blue.50\"}\n                  p={2}\n                  alignSelf={\"flex-start\"}\n                  rounded={\"md\"}\n                >\n                  {instructor.title}\n                </Text>\n                <Heading fontWeight=\"bold\">{instructor.name}</Heading>\n                <Text color={\"gray.500\"} fontSize={\"lg\"}>\n                  {instructor.description}\n                </Text>\n                <Stack\n                  spacing={4}\n                  divider={<StackDivider borderColor={\"gray.100\"} />}\n                >\n                  <Feature\n                    icon={instructor.icon}\n                    iconBg={instructor.belt}\n                    text={instructor.beltColor}\n                  />\n                  <Feature\n                    icon={\n                      <Icon as={GiTeacher} color={\"green.500\"} w={8} h={8} />\n                    }\n                    iconBg={\"green.100\"}\n                    text={instructor.role}\n                  />\n                  <Feature\n                    icon={\n                      <Icon\n                        as={GiSandsOfTime}\n                        color={\"purple.500\"}\n                        w={8}\n                        h={8}\n                      />\n                    }\n                    iconBg={\"purple.100\"}\n                    text={instructor.experience}\n                  />\n                </Stack>\n              </Stack>\n              <Flex>\n                <Image\n                loading='eager'\n                  rounded={\"xl\"}\n                  alt={\"feature image\"}\n                  src={instructor.imageSrc}\n                  objectFit={\"cover\"}\n                  w=\"350px\"\n                  h=\"450px\"\n                />\n              </Flex>\n            </SimpleGrid>\n          ))}\n        </Container>\n      </FlexContainer>\n      <SmallCentered />\n    </>\n  );\n};\n\nexport default Instructors;\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import { HTMLChakraProps, ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nStackDivider.displayName = \"StackDivider\"\n"],"names":["_ref","children","props","_objectWithoutProperties","_excluded","_jsx","Flex","_objectSpread","justifyContent","alignItems","Feature","text","icon","iconBg","_jsxs","Stack","direction","align","w","h","justify","rounded","bg","Text","fontWeight","_Fragment","Navbar","Elevator","FlexContainer","padding","flexDir","Container","maxW","py","InstructorsInfo","map","instructor","index","SimpleGrid","columns","base","md","spacing","textTransform","color","fontSize","p","alignSelf","title","Heading","name","description","divider","StackDivider","borderColor","belt","beltColor","Icon","as","GiTeacher","role","GiSandsOfTime","experience","Image","loading","alt","src","imageSrc","objectFit","SmallCentered","Grid","forwardRef","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","jsx","chakra","div","__css","displayName","count","spacingX","spacingY","minChildWidth","theme","useTheme","width","mapResponsive","value","n","_value","getToken","concat","widthToColumns","useStyleConfig","_omitThemingProps","omitThemingProps","className","h2","cx","borderWidth","height"],"sourceRoot":""}